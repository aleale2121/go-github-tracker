// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: commits.proto

package commits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitsServiceClient is the client API for CommitsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitsServiceClient interface {
	GetCommitFetchHistory(ctx context.Context, in *CommitFetchHistoryRequest, opts ...grpc.CallOption) (*CommitFetchHistoryResponse, error)
}

type commitsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitsServiceClient(cc grpc.ClientConnInterface) CommitsServiceClient {
	return &commitsServiceClient{cc}
}

func (c *commitsServiceClient) GetCommitFetchHistory(ctx context.Context, in *CommitFetchHistoryRequest, opts ...grpc.CallOption) (*CommitFetchHistoryResponse, error) {
	out := new(CommitFetchHistoryResponse)
	err := c.cc.Invoke(ctx, "/commits.CommitsService/GetCommitFetchHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitsServiceServer is the server API for CommitsService service.
// All implementations must embed UnimplementedCommitsServiceServer
// for forward compatibility
type CommitsServiceServer interface {
	GetCommitFetchHistory(context.Context, *CommitFetchHistoryRequest) (*CommitFetchHistoryResponse, error)
	mustEmbedUnimplementedCommitsServiceServer()
}

// UnimplementedCommitsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommitsServiceServer struct {
}

func (UnimplementedCommitsServiceServer) GetCommitFetchHistory(context.Context, *CommitFetchHistoryRequest) (*CommitFetchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitFetchHistory not implemented")
}
func (UnimplementedCommitsServiceServer) mustEmbedUnimplementedCommitsServiceServer() {}

// UnsafeCommitsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitsServiceServer will
// result in compilation errors.
type UnsafeCommitsServiceServer interface {
	mustEmbedUnimplementedCommitsServiceServer()
}

func RegisterCommitsServiceServer(s grpc.ServiceRegistrar, srv CommitsServiceServer) {
	s.RegisterService(&CommitsService_ServiceDesc, srv)
}

func _CommitsService_GetCommitFetchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFetchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitsServiceServer).GetCommitFetchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.CommitsService/GetCommitFetchHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitsServiceServer).GetCommitFetchHistory(ctx, req.(*CommitFetchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitsService_ServiceDesc is the grpc.ServiceDesc for CommitsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commits.CommitsService",
	HandlerType: (*CommitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommitFetchHistory",
			Handler:    _CommitsService_GetCommitFetchHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commits.proto",
}
